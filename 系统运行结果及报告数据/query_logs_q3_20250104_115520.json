[
  {
    "query_text": "-- Phase 1: Data Extraction and Preparation - Combining ASR data with device problem descriptions\nWITH exploded_problems AS (\n    SELECT\n        asr.manufacturer_name,\n        asr.report_year,\n        asr.event_type,\n        trim(prob_code) AS device_problem_code,\n        asr.report_id,\n        asr.initial_report_flag\n    FROM\n        \"maude\".\"ASR_2019\" asr\n    CROSS JOIN LATERAL UNNEST(string_to_array(asr.device_problem_codes, ';')) as prob_code\n    WHERE asr.event_type IN ('M', 'M-D')\n)\nSELECT\n    ep.manufacturer_name,\n    ep.report_year,\n    ep.event_type,\n    dp.old_to_be_deactivated AS device_problem_description,\n    COUNT(*) AS report_count\nFROM exploded_problems ep\nJOIN \"maude\".\"deviceproblemcodes\" dp ON ep.device_problem_code = dp.ï_1\nGROUP BY ep.manufacturer_name, ep.report_year, ep.event_type, dp.old_to_be_deactivated\nORDER BY ep.manufacturer_name, ep.report_year, ep.event_type DESC\nLIMIT 32;",
    "status": "SUCCESS",
    "failure_retry_count": 0,
    "no_data_retry_count": 0,
    "start_time": "2025-01-04T11:56:46.372875",
    "end_time": "2025-01-04T11:56:46.399270",
    "error_message": null,
    "usage_label": "Advanced Analysis"
  },
  {
    "query_text": "-- Phase 2: Temporal Analysis of Malfunctions by Manufacturer - Annual Malfunction Counts\nSELECT\n    manufacturer_name,\n    report_year,\n    event_type,\n    COUNT(*) AS malfunction_count\nFROM\n    \"maude\".\"ASR_2019\"\nWHERE\n    event_type IN ('M', 'M-D')\nGROUP BY\n    manufacturer_name,\n    report_year,\n    event_type\nORDER BY\n    manufacturer_name,\n    report_year\nLIMIT 32;",
    "status": "SUCCESS",
    "failure_retry_count": 0,
    "no_data_retry_count": 0,
    "start_time": "2025-01-04T11:56:46.400715",
    "end_time": "2025-01-04T11:56:46.413723",
    "error_message": null,
    "usage_label": "Advanced Analysis"
  },
  {
    "query_text": "-- Phase 2: Temporal Analysis of Malfunctions by Manufacturer - Year-over-year change in malfunction counts\nWITH annual_counts AS (\n    SELECT\n        manufacturer_name,\n        report_year,\n        COUNT(*) AS malfunction_count\n    FROM\n        \"maude\".\"ASR_2019\"\n    WHERE\n        event_type IN ('M', 'M-D')\n    GROUP BY\n        manufacturer_name,\n        report_year\n)\nSELECT\n    ac1.manufacturer_name,\n    ac1.report_year,\n    ac1.malfunction_count,\n    LAG(ac1.malfunction_count, 1, 0) OVER (PARTITION BY ac1.manufacturer_name ORDER BY ac1.report_year) AS previous_year_count,\n    (ac1.malfunction_count - LAG(ac1.malfunction_count, 1, 0) OVER (PARTITION BY ac1.manufacturer_name ORDER BY ac1.report_year)) AS year_over_year_change\nFROM annual_counts ac1\nORDER BY ac1.manufacturer_name, ac1.report_year\nLIMIT 32;",
    "status": "PERMANENT_FAILED",
    "failure_retry_count": 0,
    "no_data_retry_count": 0,
    "start_time": "2025-01-04T11:56:46.414794",
    "end_time": "2025-01-04T11:56:46.430696",
    "error_message": "function lag(bigint, integer, integer) does not exist\nLINE 18:     LAG(ac1.malfunction_count, 1, 0) OVER (PARTITION BY ac1....\n             ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n",
    "usage_label": "Advanced Analysis"
  },
  {
    "query_text": "WITH annual_counts AS (\n    SELECT\n        manufacturer_name,\n        CAST(report_year AS INTEGER) AS report_year,\n        COUNT(*) AS malfunction_count\n    FROM\n        \"maude\".\"ASR_2019\"\n    WHERE\n        event_type IN ('M', 'M-D')\n    GROUP BY\n        manufacturer_name,\n        CAST(report_year AS INTEGER)\n)\nSELECT\n    ac1.manufacturer_name,\n    ac1.report_year,\n    ac1.malfunction_count,\n    LAG(ac1.malfunction_count, CAST(1 AS BIGINT), CAST(0 AS BIGINT)) OVER (PARTITION BY ac1.manufacturer_name ORDER BY ac1.report_year) AS previous_year_count,\n    (ac1.malfunction_count - LAG(ac1.malfunction_count, CAST(1 AS BIGINT), CAST(0 AS BIGINT)) OVER (PARTITION BY ac1.manufacturer_name ORDER BY ac1.report_year)) AS year_over_year_change\nFROM annual_counts ac1\nORDER BY ac1.manufacturer_name, ac1.report_year\nLIMIT 32;",
    "status": "PERMANENT_FAILED",
    "failure_retry_count": 1,
    "no_data_retry_count": 0,
    "start_time": "2025-01-04T11:56:52.501629",
    "end_time": "2025-01-04T11:56:52.534022",
    "error_message": "function lag(bigint, bigint, bigint) does not exist\nLINE 18:     LAG(ac1.malfunction_count, CAST(1 AS BIGINT), CAST(0 AS ...\n             ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n",
    "usage_label": "Advanced Analysis"
  },
  {
    "query_text": "WITH annual_counts AS (\n    SELECT\n        manufacturer_name,\n        CAST(report_year AS INTEGER) AS report_year,\n        COUNT(*) AS malfunction_count\n    FROM\n        \"maude\".\"ASR_2019\"\n    WHERE\n        event_type IN ('M', 'M-D')\n    GROUP BY\n        manufacturer_name,\n        CAST(report_year AS INTEGER)\n)\nSELECT\n    ac1.manufacturer_name,\n    ac1.report_year,\n    ac1.malfunction_count,\n    LAG(ac1.malfunction_count, 1, 0) OVER (PARTITION BY ac1.manufacturer_name ORDER BY ac1.report_year) AS previous_year_count,\n    (ac1.malfunction_count - LAG(ac1.malfunction_count, 1, 0) OVER (PARTITION BY ac1.manufacturer_name ORDER BY ac1.report_year)) AS year_over_year_change\nFROM annual_counts ac1\nORDER BY ac1.manufacturer_name, ac1.report_year\nLIMIT 32;",
    "status": "PERMANENT_FAILED",
    "failure_retry_count": 2,
    "no_data_retry_count": 0,
    "start_time": "2025-01-04T11:56:58.368157",
    "end_time": "2025-01-04T11:56:58.393138",
    "error_message": "function lag(bigint, integer, integer) does not exist\nLINE 18:     LAG(ac1.malfunction_count, 1, 0) OVER (PARTITION BY ac1....\n             ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n",
    "usage_label": "Advanced Analysis"
  },
  {
    "query_text": "WITH annual_counts AS (\n    SELECT\n        manufacturer_name,\n        CAST(report_year AS INTEGER) AS report_year,\n        COUNT(*) AS malfunction_count\n    FROM\n        \"maude\".\"ASR_2019\"\n    WHERE\n        event_type IN ('M', 'M-D')\n    GROUP BY\n        manufacturer_name,\n        CAST(report_year AS INTEGER)\n)\nSELECT\n    ac1.manufacturer_name,\n    ac1.report_year,\n    ac1.malfunction_count,\n    LAG(ac1.malfunction_count, 1, CAST(0 AS BIGINT)) OVER (PARTITION BY ac1.manufacturer_name ORDER BY ac1.report_year) AS previous_year_count,\n    (ac1.malfunction_count - LAG(ac1.malfunction_count, 1, CAST(0 AS BIGINT)) OVER (PARTITION BY ac1.manufacturer_name ORDER BY ac1.report_year)) AS year_over_year_change\nFROM annual_counts ac1\nORDER BY ac1.manufacturer_name, ac1.report_year\nLIMIT 32;",
    "status": "SUCCESS",
    "failure_retry_count": 3,
    "no_data_retry_count": 0,
    "start_time": "2025-01-04T11:57:04.280507",
    "end_time": "2025-01-04T11:57:04.308149",
    "error_message": null,
    "usage_label": "Advanced Analysis"
  },
  {
    "query_text": "-- Phase 3: Comparative Analysis Across Manufacturers - Total Malfunction Counts\nSELECT\n    manufacturer_name,\n    COUNT(*) AS total_malfunction_count\nFROM\n    \"maude\".\"ASR_2019\"\nWHERE\n    event_type IN ('M', 'M-D')\nGROUP BY\n    manufacturer_name\nORDER BY\n    total_malfunction_count DESC\nLIMIT 32;",
    "status": "SUCCESS",
    "failure_retry_count": 0,
    "no_data_retry_count": 0,
    "start_time": "2025-01-04T11:57:04.310744",
    "end_time": "2025-01-04T11:57:04.326108",
    "error_message": null,
    "usage_label": "Advanced Analysis"
  },
  {
    "query_text": "-- Phase 3: Comparative Analysis Across Manufacturers - Percentage of total malfunctions by manufacturer\nWITH total_malfunctions AS (\n    SELECT COUNT(*) AS total FROM \"maude\".\"ASR_2019\" WHERE event_type IN ('M', 'M-D')\n)\nSELECT\n    asr.manufacturer_name,\n    COUNT(*) AS manufacturer_malfunction_count,\n    (COUNT(*) * 100.0 / tm.total) AS percentage_of_total\nFROM\n    \"maude\".\"ASR_2019\" asr,\n    total_malfunctions tm\nWHERE\n    asr.event_type IN ('M', 'M-D')\nGROUP BY\n    asr.manufacturer_name, tm.total\nORDER BY\n    percentage_of_total DESC\nLIMIT 32;",
    "status": "SUCCESS",
    "failure_retry_count": 0,
    "no_data_retry_count": 0,
    "start_time": "2025-01-04T11:57:04.328044",
    "end_time": "2025-01-04T11:57:04.352955",
    "error_message": null,
    "usage_label": "Advanced Analysis"
  },
  {
    "query_text": "-- Phase 3: Comparative Analysis Across Manufacturers - Top device problems reported by each manufacturer\nWITH exploded_problems AS (\n    SELECT\n        asr.manufacturer_name,\n        trim(prob_code) AS device_problem_code\n    FROM\n        \"maude\".\"ASR_2019\" asr\n    CROSS JOIN LATERAL UNNEST(string_to_array(asr.device_problem_codes, ';')) as prob_code\n    WHERE asr.event_type IN ('M', 'M-D')\n),\nproblem_counts AS (\n    SELECT\n        ep.manufacturer_name,\n        dp.old_to_be_deactivated AS device_problem_description,\n        COUNT(*) AS problem_count,\n        ROW_NUMBER() OVER (PARTITION BY ep.manufacturer_name ORDER BY COUNT(*) DESC) as rn\n    FROM exploded_problems ep\n    JOIN \"maude\".\"deviceproblemcodes\" dp ON ep.device_problem_code = dp.ï_1\n    GROUP BY ep.manufacturer_name, dp.old_to_be_deactivated\n)\nSELECT\n    manufacturer_name,\n    device_problem_description,\n    problem_count\nFROM problem_counts\nWHERE rn <= 5\nORDER BY manufacturer_name, problem_count DESC\nLIMIT 32;",
    "status": "SUCCESS",
    "failure_retry_count": 0,
    "no_data_retry_count": 0,
    "start_time": "2025-01-04T11:57:04.354790",
    "end_time": "2025-01-04T11:57:04.371816",
    "error_message": null,
    "usage_label": "Advanced Analysis"
  },
  {
    "query_text": "-- Phase 3: Comparative Analysis Across Manufacturers - Reporting trend comparison between two manufacturers\nWITH mfr1_counts AS (\n    SELECT\n        report_year,\n        COUNT(*) AS mfr1_count\n    FROM \"maude\".\"ASR_2019\"\n    WHERE manufacturer_name = 'ALLERGAN' AND event_type IN ('M', 'M-D')\n    GROUP BY report_year\n),\nmfr2_counts AS (\n    SELECT\n        report_year,\n        COUNT(*) AS mfr2_count\n    FROM \"maude\".\"ASR_2019\"\n    WHERE manufacturer_name = 'ABBVIE MEDICAL DEVICE CENTRE' AND event_type IN ('M', 'M-D')\n    GROUP BY report_year\n)\nSELECT\n    COALESCE(m1.report_year, m2.report_year) AS report_year,\n    COALESCE(m1_count, 0) AS allergan_malfunctions,\n    COALESCE(m2_count, 0) AS abbvie_malfunctions\nFROM mfr1_counts m1\nFULL OUTER JOIN mfr2_counts m2 ON m1.report_year = m2.report_year\nORDER BY report_year\nLIMIT 32;",
    "status": "PERMANENT_FAILED",
    "failure_retry_count": 0,
    "no_data_retry_count": 0,
    "start_time": "2025-01-04T11:57:04.372813",
    "end_time": "2025-01-04T11:57:04.391135",
    "error_message": "column \"m1_count\" does not exist\nLINE 19:     COALESCE(m1_count, 0) AS allergan_malfunctions,\n                      ^\nHINT:  Perhaps you meant to reference the column \"m1.mfr1_count\".\n",
    "usage_label": "Advanced Analysis"
  },
  {
    "query_text": "WITH mfr1_counts AS (\n    SELECT\n        report_year,\n        COUNT(*) AS mfr1_count\n    FROM \"maude\".\"ASR_2019\"\n    WHERE manufacturer_name = 'ALLERGAN' AND event_type IN ('M', 'M-D')\n    GROUP BY report_year\n),\nmfr2_counts AS (\n    SELECT\n        report_year,\n        COUNT(*) AS mfr2_count\n    FROM \"maude\".\"ASR_2019\"\n    WHERE manufacturer_name = 'ABBVIE MEDICAL DEVICE CENTRE' AND event_type IN ('M', 'M-D')\n    GROUP BY report_year\n)\nSELECT\n    COALESCE(m1.report_year, m2.report_year) AS report_year,\n    COALESCE(m1.mfr1_count, 0) AS allergan_malfunctions,\n    COALESCE(m2.mfr2_count, 0) AS abbvie_malfunctions\nFROM mfr1_counts m1\nFULL OUTER JOIN mfr2_counts m2 ON m1.report_year = m2.report_year\nORDER BY report_year\nLIMIT 32;",
    "status": "SUCCESS",
    "failure_retry_count": 1,
    "no_data_retry_count": 0,
    "start_time": "2025-01-04T11:57:10.188990",
    "end_time": "2025-01-04T11:57:10.214418",
    "error_message": null,
    "usage_label": "Advanced Analysis"
  }
]